"""
An imperfect solution for melodic insiration generation
"""
import flpianoroll as flp
import time

PPQ = flp.score.PPQ
MIDDLE_C = 48
MODE_LIST = "Major,Minor"
KEY_LIST = "C,C#,D,D#,E,F,F#,G,G#,A,A#,B"

# Expand this list to include more patterns
MELODY_TEMPLATES = [
    [0, 1, 2, 3], # 4 random stems
    [0, 1, 0, 1], # 2 stems repeated
    [0, 0, 1, 1], # 2 stems repeated then two new stems
    [0, 1, 2, 0], # 3 random stems then repeat 1st
    [0, 0, 2, 3],
    [0, 1, 0, 3],
]
MAJOR = {
    "C": MIDDLE_C,
    "D": MIDDLE_C + 2,
    "E": MIDDLE_C + 4,
    "F": MIDDLE_C + 5,
    "G": MIDDLE_C + 7,
    "A": MIDDLE_C + 9,
    "B": MIDDLE_C + 11,
}
MINOR = {
    "C": MIDDLE_C,
    "D": MIDDLE_C + 2,
    "D#": MIDDLE_C + 3,
    "F": MIDDLE_C + 5,
    "G": MIDDLE_C + 7,
    "G#": MIDDLE_C + 8,
    "A#": MIDDLE_C + 10,
}

TICKS = {
    "16": int(PPQ / 4),
    "8": int(PPQ / 2),
    "4": int(PPQ),
    "2": int(PPQ * 2),
    "1": int(PPQ * 4),
}


# ==================== Utility Functions ==================== #
def rand_num(minimum, maximum):
    now = str(time.perf_counter())
    rnd = float(now[::-1][:3:]) / 1000
    return int(minimum + rnd * (maximum - minimum))


def weighted_random(weights):
    total_weight = sum(weights)
    rnd = rand_num(0, total_weight * 10) / 10
    cumulative_weight = 0
    for i, weight in enumerate(weights):
        cumulative_weight += weight
        if rnd <= cumulative_weight:
            return i


def make_note(note_num: int, length: int, start_time: int):
    note = flp.Note()
    note.number = note_num
    note.time = start_time
    note.length = length
    note.group = 0
    note.pan = 0.5
    note.velocity = 0.8
    note.color = 0
    note.fcut = 0.5
    note.fres = 0.5
    note.pitchofs = 0
    note.slide = False
    note.porta = False
    note.muted = False
    note.selected = True
    return note


def write_sequence(note_weights, notes, key_offset, length_weights):
    note_list = []
    cursor = 0
    ticks = list(TICKS.values())
    melody_length = TICKS["1"]
    while cursor < melody_length:
        note_num = notes[weighted_random(note_weights)]
        note_len = ticks[weighted_random(length_weights)]
        note = make_note(note_num + key_offset, note_len, cursor)
        if cursor + note.length < melody_length:
            note_list.append(note)
        cursor += note.length
    return note_list


def copy_note(note):
    new_note = flp.Note()
    new_note.number = note.number
    new_note.time = note.time
    new_note.length = note.length
    new_note.group = note.group
    new_note.pan = note.pan
    new_note.velocity = note.velocity
    new_note.color = note.color
    new_note.fcut = note.fcut
    new_note.fres = note.fres
    new_note.pitchofs = note.pitchofs
    new_note.slide = note.slide
    new_note.porta = note.porta
    new_note.muted = note.muted
    new_note.selected = note.selected
    return new_note


def copy_stem(stem: list):
    stem_copy = []
    for note in stem:
        stem_copy.append(copy_note(note))
    return stem_copy


def zero_stems(stem: list):
    stem_copy = copy_stem(stem)
    while stem[0].time > 0:
        for note in stem:
            note.time -= TICKS["1"]
            if note.time < 0:
                note.time = 0
    return stem_copy

def generate_pattern(stems, pattern):
    for i, stem_pos in enumerate(pattern):
        new_stem = copy_stem(stems[stem_pos])
        new_notes = zero_stems(new_stem)
        for note in new_notes:
            note.time += TICKS["1"] * i
            flp.score.addNote(note)


# ==================== Scripting Functions ==================== #


def createDialog():
    """
    This creates the Dialog Box to control the tool.
    """
    form = flp.ScriptDialog("Whistler", "Generate melody ideas")
    form.AddInputCombo("Key", KEY_LIST, 1)
    form.AddInputCombo("Mode", MODE_LIST, 2)
    form.AddInputCombo("Octave", "4,5,6", 2)
    form.AddInputKnob("Tonic", 0.3, 0, 0.9)
    form.AddInputKnob("SuperTonic", 0.05, 0, 0.9)
    form.AddInputKnob("Mediant", 0.15, 0, 0.9)
    form.AddInputKnob("Subdominant", 0.2, 0, 0.9)
    form.AddInputKnob("Dominant", 0.2, 0, 0.9)
    form.AddInputKnob("Submediant", 0.05, 0, 0.9)
    form.AddInputKnob("LeadingTone", 0.05, 0, 0.9)
    form.AddInputKnob("sixteenths", 0.1, 0.0, 0.9)
    form.AddInputKnob("eighths", 0.3, 0.4, 0.9)
    form.AddInputKnob("quarters", 0.35, 0.4, 0.9)
    form.AddInputKnob("halves", 0.2, 0.1, 0.9)
    form.AddInputKnob("wholes", 0.05, 0.0, 0.9)
    return form


def apply(form):
    GIV = lambda x: form.GetInputValue(x)

    
    note_len_weights = [
        GIV("sixteenths"),
        GIV("eighths"),
        GIV("quarters"),
        GIV("halves"),
        GIV("wholes"),
    ]
    note_weights = [
        GIV("Tonic"),
        GIV("SuperTonic"),
        GIV("Mediant"),
        GIV("Subdominant"),
        GIV("Dominant"),
        GIV("Submediant"),
        GIV("LeadingTone"),
    ]
    key_offset = GIV("Key")
    mode = GIV("Mode")
    octave_offset = GIV("Octave") * 12
    if mode == 0:
        notes = list(MAJOR.values())
    else:
        notes = list(MINOR.values())
    stems = []  # list of four 1-bar phrases
    for measure in range(0, 5):
        stems.append(write_sequence(note_weights, notes, key_offset + octave_offset, note_len_weights))

    random_pattern = rand_num(0, len(MELODY_TEMPLATES) - 1)
    melody_pattern = MELODY_TEMPLATES[random_pattern]
    flp.score.clearNotes(False)
    generate_pattern(stems, melody_pattern)
